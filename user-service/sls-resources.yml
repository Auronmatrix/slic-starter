ApiKeyRetrievalFunctionRole:
  Type: AWS::IAM::Role
  Properties:
    RoleName: ${self:custom.stage}-cf-api-key-retrieval-role
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: [sts:AssumeRole]
    Path: /
    Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Action:
                - apigateway:GET
              Resource:
                - 'arn:aws:apigateway:#{AWS::Region}::/apikeys*'
              Effect: Allow
            - Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
              Effect: Allow

ApiKeyRetrievalFunction:
  Type: AWS::Lambda::Function
  Properties:
    Code:
      ZipFile: ${file(./api-key-retrieval-lambda-loader.js)}
    Description: CloudFormation Custom Resource to fetch API Key
    Handler: index.handler
    Role: !GetAtt ApiKeyRetrievalFunctionRole.Arn
    Runtime: nodejs8.10
    Timeout: 15

apiKeyRetrieval:
  Type: Custom::ApiKeyRetrievalFunction
  Properties:
    ServiceToken: !GetAtt ApiKeyRetrievalFunction.Arn
    ApiKeyName: userServiceApiKey
  DependsOn:
    - ApiGatewayApiKey1 # Name generated by serverless framework

userServiceNameParameter:
  Type: AWS::SSM::Parameter
  Properties:
    Name: UserServiceUrl
    Type: String
    Value:
      Fn::Join:
        - ''
        - - 'https://'
          - !Ref ApiGatewayRestApi
          - '.execute-api.${self:custom.region}.amazonaws.com/${self:custom.stage}/user/'

userServiceApiKeyParameter:
  Type: AWS::SSM::Parameter
  Properties:
    Name: UserServiceApiKey
    Type: String
    Value: !GetAtt apiKeyRetrieval.value
